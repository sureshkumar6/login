import React, { useEffect, useState } from "react";
import axios from "axios";
import EmployeeLoginChart from "./EmployeeLoginChart.js";
import NeatBackground from "./NeatBackground.js";
import "./Home.css";

const translations = [
  {
    hindi: "рд╕рднреА рдЙрдкрдирд┐рд╖рджреН рдЧрд╛рдп рд╣реИрдВ, рднрдЧрд╡рд╛рди рдХреГрд╖реНрдг рдЧреНрд╡рд╛рд▓реЗ рд╣реИрдВ, рдЕрд░реНрдЬреБрди рдмреБрджреНрдзрд┐рдорд╛рди рдмрдЫрдбрд╝рд╛ рд╣реИрдВ рдФрд░ рднрдЧрд╡рджреНрдЧреАрддрд╛ рдХрд╛ рдЕрдореГрдд рдорд╣рд╛рди рджреВрдз рд╣реИред",
    english: "All the Upanishads are cows, Lord Krishna is the Cowherd, Arjuna is the wise Calf and the nectar of the Bhagavadg─лt─Б is the greatest Milk."
  },
  {
    hindi: "рдЬрдиреНрдордиреЗ рд╡рд╛рд▓реЗ рдХреА рдореГрддреНрдпреБ рдирд┐рд╢реНрдЪрд┐рдд рд╣реИ рдФрд░ рдорд░рдиреЗ рд╡рд╛рд▓реЗ рдХрд╛ рдЬрдиреНрдо рдирд┐рд╢реНрдЪрд┐рдд рд╣реИ рдЗрд╕рд▓рд┐рдП рдЬреЛ рдЕрдЯрд▓ рд╣реИ рдЕрдкрд░рд┐рд╣рд╛рд░реНрдп рд╣реИ рдЙрд╕рдХреЗ рд╡рд┐рд╖рдп рдореЗрдВ рддреБрдордХреЛ рд╢реЛрдХ рдирд╣реАрдВ рдХрд░рдирд╛ рдЪрд╛рд╣рд┐рдпреЗред",
    english: "Death is certain for the born, and re-birth is certain for the dead; therefore you should not feel grief for what is inevitable."
  },
  {
    hindi: "рдкреНрд░рд╛рд░рдмреНрдз-рдХрд░реНрдо рдХреЛ рднреЛрдЧрддрд╛ рд╣реБрдЖ рдЬреЛ рдордиреБрд╖реНрдп рдЧреАрддрд╛ рдХреЗ рдЕрднреНрдпрд╛рд╕ рдореЗрдВ рдирд┐рд░рдд рд╣реИ, рд╡рд╣ рдЗрд╕ рд▓реЛрдХ рдореЗрдВ рдореБрдХреНрдд рдФрд░ рд╕реБрдЦреА рд╣реЛрддрд╛ рд╣реИ рддрдерд╛ рдХрд░реНрдо рдореЗрдВ рд▓рд┐рдкреНрдд рдирд╣реАрдВ рд╣реЛрддрд╛ред",
    english: "One who indulges in ongoing action and is engaged in regular study of the g─лt─Б, is free and happy in this world and is not bound by karma."
  },
  {
    hindi: "рдЬреИрд╕реЗ рдЗрд╕ рджреЗрд╣ рдореЗрдВ рджреЗрд╣реА рдЬреАрд╡рд╛рддреНрдорд╛ рдХреА рдХреБрдорд╛рд░, рдпреБрд╡рд╛ рдФрд░ рд╡реГрджреНрдзрд╛рд╡рд╕реНрдерд╛ рд╣реЛрддреА рд╣реИ рд╡реИрд╕реЗ рд╣реА рдЙрд╕рдХреЛ рдЕрдиреНрдп рд╢рд░реАрд░ рдХреА рдкреНрд░рд╛рдкреНрддрд┐ рд╣реЛрддреА рд╣реИред рдзреАрд░ рдкреБрд░реБрд╖ рдЗрд╕рдореЗрдВ рдореЛрд╣рд┐рдд рдирд╣реАрдВ рд╣реЛрддрд╛ рд╣реИред",
    english: "Just as the boyhood, youth and old age come to the embodied Soul in this body, in the same manner, is the attaining of another body; the wise man is not deluded at that."
  },
  {
    hindi: "рдЬреЛ рдЖрддреНрдорд╛ рдХреЛ рдорд╛рд░рдиреЗ рд╡рд╛рд▓рд╛ рд╕рдордЭрддрд╛ рд╣реИ рдФрд░ рдЬреЛ рдЗрд╕рдХреЛ рдорд░рд╛ рд╕рдордЭрддрд╛ рд╣реИ рд╡реЗ рджреЛрдиреЛрдВ рд╣реА рдирд╣реАрдВ рдЬрд╛рдирддреЗ рд╣реИрдВ, рдХреНрдпреЛрдВрдХрд┐ рдпрд╣ рдЖрддреНрдорд╛ рди рдорд░рддрд╛ рд╣реИ рдФрд░ рди рдорд╛рд░рд╛ рдЬрд╛рддрд╛ рд╣реИред",
    english: "He who thinks that the soul kills, and he who thinks of it as killed, are both ignorant. The soul kills not, nor is it killed."
  },
  {
    hindi: "рдЖрддреНрдорд╛ рдХрд┐рд╕реА рдХрд╛рд▓ рдореЗрдВ рднреА рди рдЬрдиреНрдорддрд╛ рд╣реИ рдФрд░ рди рдорд░рддрд╛ рд╣реИ рдФрд░ рди рдпрд╣ рдПрдХ рдмрд╛рд░ рд╣реЛрдХрд░ рдлрд┐рд░ рдЕрднрд╛рд╡рд░реВрдк рд╣реЛрдиреЗ рд╡рд╛рд▓рд╛ рд╣реИред рдЖрддреНрдорд╛ рдЕрдЬрдиреНрдорд╛, рдирд┐рддреНрдп, рд╢рд╛рд╢реНрд╡рдд рдФрд░ рдкреБрд░рд╛рддрди рд╣реИ, рд╢рд░реАрд░ рдХреЗ рдирд╛рд╢ рд╣реЛрдиреЗ рдкрд░ рднреА рдЗрд╕рдХрд╛ рдирд╛рд╢ рдирд╣реАрдВ рд╣реЛрддрд╛ред",
    english: "The soul is never born, it never dies having come into being once, it never ceases to be. Unborn, eternal, abiding and primeval, it is not slain when the body is slain."
  }
];

const Home = () => {
  const [employeeName, setEmployeeName] = useState("");
  const [shloka, setShloka] = useState({});
  const [employeeStatus, setEmployeeStatus] = useState([]);
  const [announcements, setAnnouncements] = useState([]);
  const [workSummary, setWorkSummary] = useState([]);
  const API_BASE_URL = process.env.REACT_APP_API_URL || "http://localhost:6060";

  useEffect(() => {
    const storedUser = JSON.parse(localStorage.getItem("user"));
    if (storedUser) {
      setEmployeeName(storedUser.name);
    }
    
    fetchAnnouncements();
    setDailyShloka();
    fetchEmployeeStatus();
    fetchAnnouncements();
    fetchWorkSummary();
  }, []);

  const setDailyShloka = () => {
    const today = new Date().toISOString().split("T")[0];
    const storedShloka = JSON.parse(localStorage.getItem("dailyShloka"));

    if (storedShloka && storedShloka.date === today) {
      setShloka(storedShloka.shloka);
    } else {
      const newShloka = translations[Math.floor(Math.random() * translations.length)];
      localStorage.setItem("dailyShloka", JSON.stringify({ date: today, shloka: newShloka }));
      setShloka(newShloka);
    }
  };

  const fetchEmployeeStatus = async () => {
    try {
      const response = await fetch(`${API_BASE_URL}/daily-activity`);
      const data = await response.json();
      // console.log(data)

      const statusMap = {};
      const today = new Date().toISOString().split("T")[0];

      data.forEach((entry) => {
        if (entry.date === today) {
          statusMap[entry.email] = {
            name: entry.email.split("@")[0],
            work: entry.work,
            status: entry.endTime ? "Logged Out" : "Working"
          };
        }
      });

      setEmployeeStatus(Object.values(statusMap));
    } catch (error) {
      console.error("Error fetching employee status:", error);
    }
  };

  const fetchAnnouncements = async () => {
    try {
      const response = await axios.get(`${API_BASE_URL}/announcements`);
      console.log("announcements response:", response.data); // This will correctly log the data
      setAnnouncements(response.data); // тЬЕ Correct way to update state
    } catch (error) {
      console.error("Error fetching announcements:", error);
    }
  };
  // Fetch daily work summary
  const fetchWorkSummary = async () => {
    try {
      const storedUser = JSON.parse(localStorage.getItem("user"));
      const employeeEmail = storedUser?.email; // Get employee email from local storage
  
      if (!employeeEmail) {
        console.warn("No employee email found in local storage.");
        return;
      }
  
      // console.log("Fetching work summary for:", employeeEmail);
  
      const response = await axios.get(`${API_BASE_URL}/daily-activity`);
      // console.log("API Response:", response.data);
  
      const data = response.data;
      const today = new Date().toISOString().split("T")[0];
  
      // Filter activities for the logged-in employee and today's date
      const filteredActivities = data.filter((activity) => {
        const isMatchingEmail = activity.email  === employeeEmail;
        const isMatchingDate = activity.date === today;
  
        // console.log("Checking activity:", activity);
        // console.log("Email match:", isMatchingEmail, "| Date match:", isMatchingDate);
  
        return isMatchingEmail && isMatchingDate;
      });
  
      // console.log("Filtered Activities:", filteredActivities);
  
      setWorkSummary(filteredActivities);
    } catch (error) {
      console.error("Error fetching work summary:", error);
    }
  };
  

  return (
    <div className="home-container">
      <NeatBackground/>
      <h1>Hello, {employeeName} ЁЯСЛ</h1>

      {/* Bhagavad Gita Shloka */}
      <div className="shloka-box">
        <h2>ЁЯУЦ Thought of the Day</h2>
        <p><strong>Hindi:</strong> {shloka.hindi}</p>
        <p><strong>English:</strong> {shloka.english}</p>
      </div>

      {/* Real-time Employee Status */}
      <div className="status-section">
        {/* <h2>ЁЯСе Employee Status</h2> */}
        <div className="work-summary">
        <h2>ЁЯУЕ Date: {new Date().toLocaleDateString()}</h2>
        <h3>Today I Worked On:</h3>
        {workSummary.length > 0 ? (
          <ul>
            {workSummary.map((activity, index) => (
              <li key={index}>
                тЮЭ Worked on "{activity.work}" "{activity.subWorkType}"
              </li>
            ))}
          </ul>
        ) : (
          <p>No work logged today.</p>
        )}
      </div>
        <div className="chart-section">
        {/* <h2>ЁЯУК Your Work Summary</h2> */}
        {employeeName ? (
          <EmployeeLoginChart selectedEmployee={employeeName} isAdmin={false}/>
        ) : (
          <p>Loading chart...</p>
        )}
      </div>
      <div>

      </div>
      </div>

      {/* Announcements */}
      <div className="announcements">
    <h2>ЁЯУв Announcements</h2>
    {announcements.length > 0 ? (
      announcements.map((announcement, index) => (
        <div key={index} className="announcement-item">
          <p>{announcement.message}</p>
          <span>{new Date(announcement.date).toLocaleDateString()}</span>
        </div>
      ))
    ) : (
      <p>No announcements today.</p>
    )}
  </div>
    </div>
  );
};

export default Home;
